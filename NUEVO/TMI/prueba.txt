#include <stdio.h> //Permite el uso de funciones de entrada y salida, como printf y scanf
#include <stdlib.h> //Proporciona funciones como system, usada para limpiar la pantalla.
#include <windows.h>
#include <conio.h> //Facilita el manejo de caracteres en consola y la función getch(), usada para pausar la ejecución hasta que el usuario presione una tecla.
#include <string.h>

#include "turno.h"
#include "cliente.h"
#include "listaD_Turno.h"
#include "listaE_Cliente.h"

// Función para cambiar color de texto, recibe un numero del cual proviene un color
void setColor(int color) {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, color); //aplica el color a traves de esta funcion
}

// Función para limpiar pantalla
void limpiarPantalla() {
    system("cls"); //limpia la pantalla (funcion de windows)
}

// Funcion para mostrar el menu principal
void mostrarMenuPrincipal() {
    limpiarPantalla();
    setColor(14); // Amarillo
    printf("\n**********************************\n");
    printf("*      SISTEMA DE TURNOS         *\n");
    printf("**********************************\n");
    setColor(11); // Cian claro
    printf("1. Gestion de Turnos\n");
    printf("2. Gestion de Clientes\n");
    printf("3. Reportes\n");
    printf("4. Salir\n");
    setColor(15); // Blanco
    printf("Seleccione una opcion: ");
}

// Submenu para la gestion de turnos
void mostrarMenuTurnos() {
    limpiarPantalla();
    setColor(14); // Amarillo
    printf("\n**********************************\n");
    printf("*         GESTION DE TURNOS      *\n");
    printf("**********************************\n");
    setColor(11); // Cian claro
    printf("1. Agendar un nuevo turno\n");
    printf("2. Buscar turno por cliente\n");
    printf("3. Mostrar todos los turnos de un mes\n");
    printf("4. Mostrar turnos por nombre de cliente\n");
    printf("5. Modificar cantidad de tratamientos\n");
    printf("6. Modificar forma de pago\n");
    printf("7. Cancelar un turno\n");
    printf("8. Confirmar asistencia de turno\n");
    printf("9. Mostrar turnos no realizados\n");
    printf("0. Volver al menu principal\n");
    setColor(15); // Blanco
    printf("Seleccione una opcion: ");
}

// Submenu para la gestion de clientes
void mostrarMenuClientes() {
    limpiarPantalla();
    setColor(14); // Amarillo
    printf("\n**********************************\n");
    printf("*         GESTION DE CLIENTES    *\n");
    printf("**********************************\n");
    setColor(11); // Cian claro
    printf("1. Registrar nuevo cliente\n");
    printf("2. Buscar y mostrar clientes\n");
    printf("3. Eliminar cliente\n");
    printf("4. Precargar lista de clientes\n");
    printf("5. Mostrar todos los clientes\n");
    printf("0. Volver al menu principal\n");
    setColor(15); // Blanco
    printf("Seleccione una opcion: ");
}

// Submenu para los reportes
void mostrarMenuReportes() {
    limpiarPantalla();
    setColor(14); // Amarillo
    printf("\n**********************************\n");
    printf("*         REPORTES               *\n");
    printf("**********************************\n");
    setColor(11); // Cian claro
    printf("1. Ganancia mensual\n");
    printf("2. Guardar turnos segun forma de pago\n");
    printf("3. Mostrar turnos por tratamiento\n");
    printf("0. Volver al menu principal\n");
    setColor(15); // Blanco
    printf("Seleccione una opcion: ");
}

// Validacion de entrada para asegurarse de que el usuario ingresa un numero
int obtenerOpcion() {
    int opcion;
    if (scanf("%d", &opcion) != 1) {
        printf("Entrada invalida. Por favor ingrese un numero.\n");
        fflush(stdin); // Limpiar el buffer en Windows
        opcion = -1;  // Indica opcion invalida
    }
    return opcion;
}

// Función para registrar un nuevo cliente en la lista
void registrarCliente(lista_de_clientes *clientes) {
    if (isfull(*clientes)) {
        printf("Lista de clientes llena. No se pueden registrar mas clientes.\n");
        return;
    }

    Cliente nuevoCliente;
    char id_cliente[9];
    char nombre[20];
    char apellido[20];

    // Solicita y asigna el ID del cliente
    printf("Ingrese el ID del cliente: ");
    scanf("%s", id_cliente);
    set_id_cliente(&nuevoCliente, id_cliente);

    // Solicita y asigna el nombre del cliente
    printf("Ingrese el nombre del cliente: ");
    scanf("%s", nombre);
    set_nombre(&nuevoCliente, nombre);

    // Solicita y asigna el apellido del cliente
    printf("Ingrese el apellido del cliente: ");
    scanf("%s", apellido);
    set_apellido(&nuevoCliente, apellido);

    // Inicializa canttratamientos y nivel
    initt(&nuevoCliente);  // canttratamientos a 0
    set_nivel(&nuevoCliente, 0); // nivel a 0

    insertl(clientes, nuevoCliente);
    printf("Cliente registrado exitosamente.\n");
}

// Función para buscar un cliente en la lista y mostrar sus datos
void buscarCliente(lista_de_clientes clientes) {
    char id_cliente[9];
    printf("Ingrese el ID del cliente a buscar: ");
    scanf("%s", id_cliente);

    for (int i = 0; i <= clientes.ultimo; i++) {
        if (strcmp(clientes.vipd[i].id_cliente, id_cliente) == 0) {
            printf("Cliente encontrado:\n");
            printf("ID: %s\n", clientes.vipd[i].id_cliente);
            printf("Nombre: %s\n", clientes.vipd[i].nombre);
            printf("Apellido: %s\n", clientes.vipd[i].apellido);
            printf("Cantidad de tratamientos: %d\n", clientes.vipd[i].canttratamientos);
            printf("Nivel: %d\n", clientes.vipd[i].nivel);
            return;
        }
    }
    printf("Cliente no encontrado.\n");
}

// Función para eliminar un cliente de la lista
void eliminarCliente(lista_de_clientes *clientes) {
    if (isempty(*clientes)) {
        printf("La lista de clientes está vacia.\n");
        return;
    }

    char id_cliente[9];
    printf("Ingrese el ID del cliente a eliminar: ");
    scanf("%s", id_cliente);

    for (int i = 0; i <= clientes->ultimo; i++) {
        if (strcmp(clientes->vipd[i].id_cliente, id_cliente) == 0) {
            clientes->cursor = i; // Posiciona el cursor en el cliente encontrado
            supress(clientes);
            printf("Cliente eliminado exitosamente.\n");
            return;
        }
    }
    printf("Cliente no encontrado.\n");
}

// Función para mostrar todos los clientes registrados
void mostrarTodosLosClientes(lista_de_clientes clientes) {
    if (isempty(clientes)) {
        printf("La lista de clientes está vacia.\n");
        return;
    }

    printf("Lista de clientes registrados:\n");
    for (int i = 0; i <= clientes.ultimo; i++) {
        printf("ID: %s\n", clientes.vipd[i].id_cliente);
        printf("Nombre: %s\n", clientes.vipd[i].nombre);
        printf("Apellido: %s\n", clientes.vipd[i].apellido);
        printf("Cantidad de tratamientos: %d\n", clientes.vipd[i].canttratamientos);
        printf("Nivel: %d\n", clientes.vipd[i].nivel);
        printf("-------------------------\n");
    }
}

// Función principal
int main() {
    lista_de_clientes clientes;
    init(&clientes);
    int opcionPrincipal, opcionTurnos, opcionClientes, opcionReportes;

    do {
        mostrarMenuPrincipal();
        opcionPrincipal = obtenerOpcion();

        switch (opcionPrincipal) {
            case 1:
                do {
                    mostrarMenuTurnos();
                    opcionTurnos = obtenerOpcion();
                    // Implementar casos para cada opción en Turnos 
                } while(opcionTurnos != 0);
                break;

            case 2:
                do {
                    mostrarMenuClientes();
                    opcionClientes = obtenerOpcion();
                    switch(opcionClientes) {
                        case 1:
                            registrarCliente(&clientes);
                            break;
                        case 2:
                            buscarCliente(clientes);
                            break;
                        case 3:
                            eliminarCliente(&clientes);
                            break;
                        case 5:
                            mostrarTodosLosClientes(clientes);
                            break;
                        case 0:
                            printf("Volviendo al menu principal...\n");
                            break;
                        default:
                            printf("Opción inválida. Intente nuevamente.\n");
                    }
                    printf("Presione cualquier tecla para continuar...\n");
                    getch();
                } while(opcionClientes != 0);
                break;

            case 3:
                do {
                    mostrarMenuReportes();
                    opcionReportes = obtenerOpcion();
                    // Implementar casos para cada opción de Reportes 
                } while(opcionReportes != 0);
                break;

            case 4:
                printf("Saliendo del programa...\n");
                break;

            default:
                printf("Opción inválida. Intente nuevamente.\n");
        }
        printf("Presione cualquier tecla para continuar...\n");
        getch();
    } while(opcionPrincipal != 4);

    return 0;
}