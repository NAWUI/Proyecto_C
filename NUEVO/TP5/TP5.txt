#include <stdio.h>

void imprimirNaturales(int n) {
    if (n > 0) {
        imprimirNaturales(n - 1);
        printf("%d ", n);
    }
}

int main() {
    int n = 10;
    imprimirNaturales(n);
    return 0;
}
-----------------------
#include <stdio.h>

int sumaNaturales(int n) {
    if (n == 0) return 0;
    return n + sumaNaturales(n - 1);
}

int main() {
    int n = 10;
    printf("Suma de los primeros %d naturales: %d\n", n, sumaNaturales(n));
    return 0;
}
----------
#include <stdio.h>

int buscarElemento(int arr[], int n, int elem) {
    if (n == 0) return -1;
    if (arr[n - 1] == elem) return n - 1;
    return buscarElemento(arr, n - 1, elem);
}

int main() {
    int arr[] = {1, 3, 5, 7, 9};
    int n = 5;
    int elem = 7;
    int indice = buscarElemento(arr, n, elem);
    printf("Elemento %d encontrado en la posición %d\n", elem, indice);
    return 0;
}
-----------
#include <stdio.h>

int compararStrings(char S1[], char S2[], int n) {
    if (n == 0) return 1;
    if (S1[n - 1] != S2[n - 1]) return 0;
    return compararStrings(S1, S2, n - 1);
}

int main() {
    char S1[] = "hola";
    char S2[] = "hola";
    int n = 4; // Longitud de las cadenas
    int iguales = compararStrings(S1, S2, n);
    printf("Las cadenas son %s\n", iguales ? "iguales" : "diferentes");
    return 0;
}
------------
#include <stdio.h>

double sumaArreglo(double arr[], int n) {
    if (n == 0) return 0;
    return arr[n - 1] + sumaArreglo(arr, n - 1);
}

int main() {
    double arr[] = {1.1, 2.2, 3.3, 4.4};
    int n = 4;
    printf("Suma del arreglo: %.2f\n", sumaArreglo(arr, n));
    return 0;
}
--------------
#include <stdio.h>

void imprimirInverso(char arr[], int n) {
    if (n == 0) return;
    printf("%c", arr[n - 1]);
    imprimirInverso(arr, n - 1);
}

int main() {
    char arr[] = "recursivo";
    int n = 9; // Longitud de la cadena
    imprimirInverso(arr, n);
    return 0;
}
---------
#include <stdio.h>

int encontrarMayor(int arr[], int n) {
    if (n == 1) return arr[0];
    int maxResto = encontrarMayor(arr, n - 1);
    return arr[n - 1] > maxResto ? arr[n - 1] : maxResto;
}

int main() {
    int arr[] = {3, 1, 4, 1, 5, 9};
    int n = 6;
    printf("El mayor valor del arreglo es: %d\n", encontrarMayor(arr, n));
    return 0;
}
----------
#include <stdio.h>
#include <string.h>

typedef struct {
    char nombre[50];
    char apellido[50];
    int edad;
} Empleado;

void buscarPorApellido(Empleado empleados[], int n, char apellido[]) {
    if (n == 0) return;
    if (strcmp(empleados[n - 1].apellido, apellido) == 0) {
        printf("Nombre: %s, Apellido: %s, Edad: %d\n", empleados[n - 1].nombre, empleados[n - 1].apellido, empleados[n - 1].edad);
    }
    buscarPorApellido(empleados, n - 1, apellido);
}

int main() {
    Empleado empleados[] = {{"Juan", "Garcia", 30}, {"Ana", "Perez", 25}, {"Luis", "Garcia", 40}};
    int n = 3;
    buscarPorApellido(empleados, n, "Garcia");
    return 0;
}
----
void imprimirZA(Empleado empleados[], int n) {
    if (n == 0) return;
    printf("Nombre: %s\n", empleados[n - 1].nombre);
    imprimirZA(empleados, n - 1);
}
----
void imprimirAZ(Empleado empleados[], int n) {
    if (n == 0) return;
    imprimirAZ(empleados, n - 1);
    printf("Nombre: %s\n", empleados[n - 1].nombre);
}
-----
#include <stdio.h>
#include <string.h>

typedef struct {
    int NroID;
    char bloque[10];
    char tipo[20];
    int mesas;
    int sillas;
    int pizarras;
    struct {
        char marca[20];
        char color[10];
        int controlRemoto;
    } proyector;
} Aula;

void imprimirAulasConControl(Aula aulas[], int n) {
    if (n == 0) return;
    if (aulas[n - 1].proyector.controlRemoto) {
        printf("Aula con ID: %d tiene proyector con control remoto.\n", aulas[n - 1].NroID);
    }
    imprimirAulasConControl(aulas, n - 1);
}

int main() {
    Aula aulas[] = {
        {101, "B1", "Teoría", 30, 40, 1, {"Epson", "Blanco", 1}},
        {102, "B2", "Laboratorio", 20, 20, 2, {"Sony", "Negro", 0}},
        {103, "B3", "Conferencia", 50, 100, 1, {"Samsung", "Gris", 1}}
    };
    int n = 3;
    imprimirAulasConControl(aulas, n);
    return 0;
}

